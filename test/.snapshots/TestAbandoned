// Code generated by schema-generate. DO NOT EDIT.

package test

import (
    "encoding/json"
    "errors"
)

// PackageList List of packages marked as abandoned for this repository, the mark can be boolean or a package name/URL pointing to a recommended alternative.
type PackageList struct {
}

// Root 
type Root struct {

  // List of packages marked as abandoned for this repository, the mark can be boolean or a package name/URL pointing to a recommended alternative.
  Abandoned *PackageList `json:"abandoned,omitempty"`

  // Repository name.
  Name string `json:"name"`
}

func (strct *Root) UnmarshalJSON(b []byte) error {
    nameReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // apply default values

    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "abandoned":
            if err := json.Unmarshal([]byte(v), &strct.Abandoned); err != nil {
                return err
             }
        case "name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
            nameReceived = true
        }
    }
    // check if name (a required property) was received
    if !nameReceived {
        return errors.New("\"name\" is required but was not present")
    }
    return nil
}

