// Code generated by schema-generate. DO NOT EDIT.

package test

import (
    "bytes"
    "encoding/json"
    "errors"
)

// EntityAttributeType Enum
type EntityAttributeType string
const (
	EntityAttributeType_TEXT EntityAttributeType = "TEXT"
	EntityAttributeType_LONG_TEXT EntityAttributeType = "LONG_TEXT"
	EntityAttributeType_MULTI_ATTACHMENT EntityAttributeType = "MULTI_ATTACHMENT"
	EntityAttributeType_MULTI_SELECT EntityAttributeType = "MULTI_SELECT"
	EntityAttributeType_CASCADED_SELECT EntityAttributeType = "CASCADED_SELECT"
	EntityAttributeType_SELECT EntityAttributeType = "SELECT"
	EntityAttributeType_STATUS EntityAttributeType = "STATUS"
	EntityAttributeType_COLLABORATOR EntityAttributeType = "COLLABORATOR"
	EntityAttributeType_MULTI_COLLABORATOR EntityAttributeType = "MULTI_COLLABORATOR"
	EntityAttributeType_DEPT EntityAttributeType = "DEPT"
	EntityAttributeType_DATETIME EntityAttributeType = "DATETIME"
	EntityAttributeType_NUMBER EntityAttributeType = "NUMBER"
	EntityAttributeType_CURRENCY EntityAttributeType = "CURRENCY"
	EntityAttributeType_RATING EntityAttributeType = "RATING"
	EntityAttributeType_BOOLEAN EntityAttributeType = "BOOLEAN"
	EntityAttributeType_PHONE EntityAttributeType = "PHONE"
	EntityAttributeType_EMAIL EntityAttributeType = "EMAIL"
	EntityAttributeType_UNIQUE_ID EntityAttributeType = "UNIQUE_ID"
	EntityAttributeType_LOOKUP EntityAttributeType = "LOOKUP"
	EntityAttributeType_FORMULA EntityAttributeType = "FORMULA"
	EntityAttributeType_ROLLUP EntityAttributeType = "ROLLUP"
	EntityAttributeType_CREATED_AT EntityAttributeType = "CREATED_AT"
	EntityAttributeType_CREATED_BY EntityAttributeType = "CREATED_BY"
	EntityAttributeType_ID EntityAttributeType = "ID"
	EntityAttributeType_RECORD_REFERENCE EntityAttributeType = "RECORD_REFERENCE"
)

// Name 
type Name struct {
  First *string `json:"first,omitempty"`
  Typ EntityAttributeType `json:"typ"`
}

// Person 
type Person struct {
  Name *Name `json:"name,omitempty"`
  Typ *EntityAttributeType `json:"typ,omitempty"`
}

// Root 
type Root struct {
  Person *Person `json:"person,omitempty"`
}

func (strct *Name) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "first" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"first\": ")
	if tmp, err := json.Marshal(strct.First); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Typ" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "typ" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"typ\": ")
	if tmp, err := json.Marshal(strct.Typ); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Name) UnmarshalJSON(b []byte) error {
    typReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // apply default values

    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "first":
            if err := json.Unmarshal([]byte(v), &strct.First); err != nil {
                return err
             }
        case "typ":
            if err := json.Unmarshal([]byte(v), &strct.Typ); err != nil {
                return err
             }
            typReceived = true
        }
    }
    // check if typ (a required property) was received
    if !typReceived {
        return errors.New("\"typ\" is required but was not present")
    }
    return nil
}

