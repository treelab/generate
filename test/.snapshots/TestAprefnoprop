// Code generated by schema-generate. DO NOT EDIT.

package test

import (
    "encoding/json"
    "bytes"
    "reflect"
    "fmt"
)

// Root
type Root interface{}

// ApRefNoProp 
type ApRefNoProp struct {
  AdditionalProperties map[string]*Thing `json:"-,omitempty"`
}

// Thing 
type Thing struct {
}

func (strct *ApRefNoProp) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal any additional Properties
    for k, v := range strct.AdditionalProperties {
		if comma {
			buf.WriteString(",")
		}
        buf.WriteString(fmt.Sprintf("\"%s\":", k))
		if tmp, err := json.Marshal(v); err != nil {
			return nil, err
		} else {
			buf.Write(tmp)
		}
        comma = true
	}

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ApRefNoProp) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // apply default values

    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        default:
            // an additional "*Thing" value
            var additionalValue *Thing
            if err := json.Unmarshal([]byte(v), &additionalValue); err != nil {
                return err // invalid additionalProperty
            }
            if strct.AdditionalProperties == nil {
                strct.AdditionalProperties = make(map[string]*Thing, 0)
            }
            strct.AdditionalProperties[k]= additionalValue
        }
    }
    return nil
}

