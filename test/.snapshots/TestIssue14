// Code generated by schema-generate. DO NOT EDIT.

package test

import (
    "encoding/json"
    "errors"
)

// ArrayWithoutDefinedItem 
type ArrayWithoutDefinedItem struct {

  // Repository name.
  Name string `json:"name"`

  // A set of additional repositories where packages can be found.
  Repositories []interface{} `json:"repositories,omitempty"`
}

func (strct *ArrayWithoutDefinedItem) UnmarshalJSON(b []byte) error {
    nameReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // apply default values

    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
            nameReceived = true
        case "repositories":
            if err := json.Unmarshal([]byte(v), &strct.Repositories); err != nil {
                return err
             }
        }
    }
    // check if name (a required property) was received
    if !nameReceived {
        return errors.New("\"name\" is required but was not present")
    }
    return nil
}

