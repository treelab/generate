// Code generated by schema-generate. DO NOT EDIT.

package test

import (
    "encoding/json"
    "errors"
)

// Address 
type Address struct {
  City string `json:"city"`
  State string `json:"state"`
  StreetAddress string `json:"street_address"`
}

// Root 
type Root struct {
  BillingAddress *Address `json:"billing_address,omitempty"`
  ShippingAddress *Address `json:"shipping_address,omitempty"`
}

func (strct *Address) UnmarshalJSON(b []byte) error {
    cityReceived := false
    stateReceived := false
    street_addressReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // apply default values

    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "city":
            if err := json.Unmarshal([]byte(v), &strct.City); err != nil {
                return err
             }
            cityReceived = true
        case "state":
            if err := json.Unmarshal([]byte(v), &strct.State); err != nil {
                return err
             }
            stateReceived = true
        case "street_address":
            if err := json.Unmarshal([]byte(v), &strct.StreetAddress); err != nil {
                return err
             }
            street_addressReceived = true
        }
    }
    // check if city (a required property) was received
    if !cityReceived {
        return errors.New("\"city\" is required but was not present")
    }
    // check if state (a required property) was received
    if !stateReceived {
        return errors.New("\"state\" is required but was not present")
    }
    // check if street_address (a required property) was received
    if !street_addressReceived {
        return errors.New("\"street_address\" is required but was not present")
    }
    return nil
}

