// Code generated by schema-generate. DO NOT EDIT.

package test

import (
    "encoding/json"
    "errors"
)

// ProductSet
type ProductSet []*Product

// Dimensions 
type Dimensions struct {
  Height float64 `json:"height"`
  Length float64 `json:"length"`
  Width float64 `json:"width"`
}

// Product 
type Product struct {
  Dimensions *Dimensions `json:"dimensions,omitempty"`

  // The unique identifier for a product
  Id float64 `json:"id"`
  Name string `json:"name"`
  Price float64 `json:"price"`
  Tags []string `json:"tags,omitempty"`
}

func (strct *Dimensions) UnmarshalJSON(b []byte) error {
    heightReceived := false
    lengthReceived := false
    widthReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // apply default values

    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "height":
            if err := json.Unmarshal([]byte(v), &strct.Height); err != nil {
                return err
             }
            heightReceived = true
        case "length":
            if err := json.Unmarshal([]byte(v), &strct.Length); err != nil {
                return err
             }
            lengthReceived = true
        case "width":
            if err := json.Unmarshal([]byte(v), &strct.Width); err != nil {
                return err
             }
            widthReceived = true
        }
    }
    // check if height (a required property) was received
    if !heightReceived {
        return errors.New("\"height\" is required but was not present")
    }
    // check if length (a required property) was received
    if !lengthReceived {
        return errors.New("\"length\" is required but was not present")
    }
    // check if width (a required property) was received
    if !widthReceived {
        return errors.New("\"width\" is required but was not present")
    }
    return nil
}

func (strct *Product) UnmarshalJSON(b []byte) error {
    idReceived := false
    nameReceived := false
    priceReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // apply default values

    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "dimensions":
            if err := json.Unmarshal([]byte(v), &strct.Dimensions); err != nil {
                return err
             }
        case "id":
            if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
                return err
             }
            idReceived = true
        case "name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
            nameReceived = true
        case "price":
            if err := json.Unmarshal([]byte(v), &strct.Price); err != nil {
                return err
             }
            priceReceived = true
        case "tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        }
    }
    // check if id (a required property) was received
    if !idReceived {
        return errors.New("\"id\" is required but was not present")
    }
    // check if name (a required property) was received
    if !nameReceived {
        return errors.New("\"name\" is required but was not present")
    }
    // check if price (a required property) was received
    if !priceReceived {
        return errors.New("\"price\" is required but was not present")
    }
    return nil
}

