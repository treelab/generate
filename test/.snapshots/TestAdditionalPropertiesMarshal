// Code generated by schema-generate. DO NOT EDIT.

package test

import (
    "bytes"
    "reflect"
    "encoding/json"
    "fmt"
    "errors"
)

// Root
type Root interface{}

// ApFalseNoProp 
type ApFalseNoProp struct {
}

// ApFalseProp 
type ApFalseProp struct {
  Stuff *string `json:"stuff,omitempty"`
}

// ApFalseReqProp 
type ApFalseReqProp struct {
  Stuff string `json:"stuff"`
}

// ApRefNoProp 
type ApRefNoProp struct {
  AdditionalProperties map[string]*Thing `json:"-,omitempty"`
}

// ApRefProp 
type ApRefProp struct {
  AdditionalProperties map[string]*Thing `json:"-,omitempty"`
  Stuff *string `json:"stuff,omitempty"`
}

// ApRefReqProp 
type ApRefReqProp struct {
  AdditionalProperties map[string]*Thing `json:"-,omitempty"`
  Stuff string `json:"stuff"`
}

// ApTrueNoProp 
type ApTrueNoProp struct {
  AdditionalProperties map[string]interface{} `json:"-,omitempty"`
}

// ApTrueProp 
type ApTrueProp struct {
  AdditionalProperties map[string]interface{} `json:"-,omitempty"`
  Stuff *string `json:"stuff,omitempty"`
}

// ApTrueReqProp 
type ApTrueReqProp struct {
  AdditionalProperties map[string]interface{} `json:"-,omitempty"`
  Stuff string `json:"stuff"`
}

// Thing 
type Thing struct {
}

func (strct *ApFalseNoProp) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ApFalseNoProp) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // apply default values

    // parse all the defined properties
    for k, _ := range jsonMap {
        switch k {
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *ApFalseProp) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "stuff" field
		if reflect.ValueOf(strct.Stuff).IsValid() && !reflect.ValueOf(strct.Stuff).IsZero() {
			if comma { 
				buf.WriteString(",") 
			}
			buf.WriteString("\"stuff\": ")
			if tmp, err := json.Marshal(strct.Stuff); err != nil {
				return nil, err
		 	} else {
				buf.Write(tmp)
			}
			comma = true
		}
	
	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ApFalseProp) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // apply default values

    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "stuff":
            if err := json.Unmarshal([]byte(v), &strct.Stuff); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}

func (strct *ApFalseReqProp) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Stuff" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "stuff" field
			if comma { 
				buf.WriteString(",") 
			}
			buf.WriteString("\"stuff\": ")
			if tmp, err := json.Marshal(strct.Stuff); err != nil {
				return nil, err
		 	} else {
				buf.Write(tmp)
			}
			comma = true
	
	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ApFalseReqProp) UnmarshalJSON(b []byte) error {
    stuffReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // apply default values

    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "stuff":
            if err := json.Unmarshal([]byte(v), &strct.Stuff); err != nil {
                return err
             }
            stuffReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if stuff (a required property) was received
    if !stuffReceived {
        return errors.New("\"stuff\" is required but was not present")
    }
    return nil
}

func (strct *ApRefNoProp) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal any additional Properties
    for k, v := range strct.AdditionalProperties {
		if comma {
			buf.WriteString(",")
		}
        buf.WriteString(fmt.Sprintf("\"%s\":", k))
		if tmp, err := json.Marshal(v); err != nil {
			return nil, err
		} else {
			buf.Write(tmp)
		}
        comma = true
	}

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ApRefNoProp) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // apply default values

    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        default:
            // an additional "*Thing" value
            var additionalValue *Thing
            if err := json.Unmarshal([]byte(v), &additionalValue); err != nil {
                return err // invalid additionalProperty
            }
            if strct.AdditionalProperties == nil {
                strct.AdditionalProperties = make(map[string]*Thing, 0)
            }
            strct.AdditionalProperties[k]= additionalValue
        }
    }
    return nil
}

func (strct *ApRefProp) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "stuff" field
		if reflect.ValueOf(strct.Stuff).IsValid() && !reflect.ValueOf(strct.Stuff).IsZero() {
			if comma { 
				buf.WriteString(",") 
			}
			buf.WriteString("\"stuff\": ")
			if tmp, err := json.Marshal(strct.Stuff); err != nil {
				return nil, err
		 	} else {
				buf.Write(tmp)
			}
			comma = true
		}
	    // Marshal any additional Properties
    for k, v := range strct.AdditionalProperties {
		if comma {
			buf.WriteString(",")
		}
        buf.WriteString(fmt.Sprintf("\"%s\":", k))
		if tmp, err := json.Marshal(v); err != nil {
			return nil, err
		} else {
			buf.Write(tmp)
		}
        comma = true
	}

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ApRefProp) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // apply default values

    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "stuff":
            if err := json.Unmarshal([]byte(v), &strct.Stuff); err != nil {
                return err
             }
        default:
            // an additional "*Thing" value
            var additionalValue *Thing
            if err := json.Unmarshal([]byte(v), &additionalValue); err != nil {
                return err // invalid additionalProperty
            }
            if strct.AdditionalProperties == nil {
                strct.AdditionalProperties = make(map[string]*Thing, 0)
            }
            strct.AdditionalProperties[k]= additionalValue
        }
    }
    return nil
}

func (strct *ApRefReqProp) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Stuff" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "stuff" field
			if comma { 
				buf.WriteString(",") 
			}
			buf.WriteString("\"stuff\": ")
			if tmp, err := json.Marshal(strct.Stuff); err != nil {
				return nil, err
		 	} else {
				buf.Write(tmp)
			}
			comma = true
	    // Marshal any additional Properties
    for k, v := range strct.AdditionalProperties {
		if comma {
			buf.WriteString(",")
		}
        buf.WriteString(fmt.Sprintf("\"%s\":", k))
		if tmp, err := json.Marshal(v); err != nil {
			return nil, err
		} else {
			buf.Write(tmp)
		}
        comma = true
	}

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ApRefReqProp) UnmarshalJSON(b []byte) error {
    stuffReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // apply default values

    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "stuff":
            if err := json.Unmarshal([]byte(v), &strct.Stuff); err != nil {
                return err
             }
            stuffReceived = true
        default:
            // an additional "*Thing" value
            var additionalValue *Thing
            if err := json.Unmarshal([]byte(v), &additionalValue); err != nil {
                return err // invalid additionalProperty
            }
            if strct.AdditionalProperties == nil {
                strct.AdditionalProperties = make(map[string]*Thing, 0)
            }
            strct.AdditionalProperties[k]= additionalValue
        }
    }
    // check if stuff (a required property) was received
    if !stuffReceived {
        return errors.New("\"stuff\" is required but was not present")
    }
    return nil
}

func (strct *ApTrueNoProp) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal any additional Properties
    for k, v := range strct.AdditionalProperties {
		if comma {
			buf.WriteString(",")
		}
        buf.WriteString(fmt.Sprintf("\"%s\":", k))
		if tmp, err := json.Marshal(v); err != nil {
			return nil, err
		} else {
			buf.Write(tmp)
		}
        comma = true
	}

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ApTrueNoProp) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // apply default values

    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        default:
            // an additional "interface{}" value
            var additionalValue interface{}
            if err := json.Unmarshal([]byte(v), &additionalValue); err != nil {
                return err // invalid additionalProperty
            }
            if strct.AdditionalProperties == nil {
                strct.AdditionalProperties = make(map[string]interface{}, 0)
            }
            strct.AdditionalProperties[k]= additionalValue
        }
    }
    return nil
}

func (strct *ApTrueProp) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "stuff" field
		if reflect.ValueOf(strct.Stuff).IsValid() && !reflect.ValueOf(strct.Stuff).IsZero() {
			if comma { 
				buf.WriteString(",") 
			}
			buf.WriteString("\"stuff\": ")
			if tmp, err := json.Marshal(strct.Stuff); err != nil {
				return nil, err
		 	} else {
				buf.Write(tmp)
			}
			comma = true
		}
	    // Marshal any additional Properties
    for k, v := range strct.AdditionalProperties {
		if comma {
			buf.WriteString(",")
		}
        buf.WriteString(fmt.Sprintf("\"%s\":", k))
		if tmp, err := json.Marshal(v); err != nil {
			return nil, err
		} else {
			buf.Write(tmp)
		}
        comma = true
	}

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ApTrueProp) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // apply default values

    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "stuff":
            if err := json.Unmarshal([]byte(v), &strct.Stuff); err != nil {
                return err
             }
        default:
            // an additional "interface{}" value
            var additionalValue interface{}
            if err := json.Unmarshal([]byte(v), &additionalValue); err != nil {
                return err // invalid additionalProperty
            }
            if strct.AdditionalProperties == nil {
                strct.AdditionalProperties = make(map[string]interface{}, 0)
            }
            strct.AdditionalProperties[k]= additionalValue
        }
    }
    return nil
}

func (strct *ApTrueReqProp) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Stuff" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "stuff" field
			if comma { 
				buf.WriteString(",") 
			}
			buf.WriteString("\"stuff\": ")
			if tmp, err := json.Marshal(strct.Stuff); err != nil {
				return nil, err
		 	} else {
				buf.Write(tmp)
			}
			comma = true
	    // Marshal any additional Properties
    for k, v := range strct.AdditionalProperties {
		if comma {
			buf.WriteString(",")
		}
        buf.WriteString(fmt.Sprintf("\"%s\":", k))
		if tmp, err := json.Marshal(v); err != nil {
			return nil, err
		} else {
			buf.Write(tmp)
		}
        comma = true
	}

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ApTrueReqProp) UnmarshalJSON(b []byte) error {
    stuffReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // apply default values

    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "stuff":
            if err := json.Unmarshal([]byte(v), &strct.Stuff); err != nil {
                return err
             }
            stuffReceived = true
        default:
            // an additional "interface{}" value
            var additionalValue interface{}
            if err := json.Unmarshal([]byte(v), &additionalValue); err != nil {
                return err // invalid additionalProperty
            }
            if strct.AdditionalProperties == nil {
                strct.AdditionalProperties = make(map[string]interface{}, 0)
            }
            strct.AdditionalProperties[k]= additionalValue
        }
    }
    // check if stuff (a required property) was received
    if !stuffReceived {
        return errors.New("\"stuff\" is required but was not present")
    }
    return nil
}

