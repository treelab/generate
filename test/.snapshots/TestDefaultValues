// Code generated by schema-generate. DO NOT EDIT.

package test

import (
    "bytes"
    "encoding/json"
)

// Root 
type Root struct {
  Age *int `json:"age,omitempty"`
  Name *string `json:"name,omitempty"`
  Score *float64 `json:"score,omitempty"`
}

func (strct *Root) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "age" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"age\": ")
	if tmp, err := json.Marshal(strct.Age); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "score" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"score\": ")
	if tmp, err := json.Marshal(strct.Score); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Root) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // apply default values
    strct.Age = -1;
    strct.Name = "Unnamed";
    strct.Score = -1;

    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "age":
            if err := json.Unmarshal([]byte(v), &strct.Age); err != nil {
                return err
             }
        case "name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
        case "score":
            if err := json.Unmarshal([]byte(v), &strct.Score); err != nil {
                return err
             }
        }
    }
    return nil
}

