// Code generated by schema-generate. DO NOT EDIT.

package test

import (
    "bytes"
    "encoding/json"
    "errors"
)

// ProductSet
type ProductSet []*Product

// Product 
type Product struct {

  // The unique identifier for a product
  Id float64 `json:"id"`
  Name string `json:"name"`
  Price float64 `json:"price"`
  Tags []string `json:"tags,omitempty"`
}

func (strct *Product) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Id" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "id" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Name" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Price" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "price" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"price\": ")
	if tmp, err := json.Marshal(strct.Price); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "tags" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"tags\": ")
	if tmp, err := json.Marshal(strct.Tags); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Product) UnmarshalJSON(b []byte) error {
    idReceived := false
    nameReceived := false
    priceReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // apply default values

    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "id":
            if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
                return err
             }
            idReceived = true
        case "name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
            nameReceived = true
        case "price":
            if err := json.Unmarshal([]byte(v), &strct.Price); err != nil {
                return err
             }
            priceReceived = true
        case "tags":
            if err := json.Unmarshal([]byte(v), &strct.Tags); err != nil {
                return err
             }
        }
    }
    // check if id (a required property) was received
    if !idReceived {
        return errors.New("\"id\" is required but was not present")
    }
    // check if name (a required property) was received
    if !nameReceived {
        return errors.New("\"name\" is required but was not present")
    }
    // check if price (a required property) was received
    if !priceReceived {
        return errors.New("\"price\" is required but was not present")
    }
    return nil
}

