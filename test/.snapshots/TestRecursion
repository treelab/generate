// Code generated by schema-generate. DO NOT EDIT.

package test

import (
    "bytes"
    "reflect"
    "encoding/json"
)

// Person 
type Person struct {
  Children []*Person `json:"children,omitempty"`
  Name *string `json:"name,omitempty"`
}

// Root 
type Root struct {
  Person *Person `json:"person,omitempty"`
}

func (strct *Person) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "children" field
		if (reflect.TypeOf(strct.Children).Kind() != reflect.Ptr && reflect.TypeOf(strct.Children).Kind() != reflect.Map) || !reflect.ValueOf(strct.Children).IsNil() {
			if comma { 
				buf.WriteString(",") 
			}
			buf.WriteString("\"children\": ")
			if tmp, err := json.Marshal(strct.Children); err != nil {
				return nil, err
		 	} else {
				buf.Write(tmp)
			}
			comma = true
		}
	    // Marshal the "name" field
		if (reflect.TypeOf(strct.Name).Kind() != reflect.Ptr && reflect.TypeOf(strct.Name).Kind() != reflect.Map) || !reflect.ValueOf(strct.Name).IsNil() {
			if comma { 
				buf.WriteString(",") 
			}
			buf.WriteString("\"name\": ")
			if tmp, err := json.Marshal(strct.Name); err != nil {
				return nil, err
		 	} else {
				buf.Write(tmp)
			}
			comma = true
		}
	
	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Person) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // apply default values

    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "children":
            if err := json.Unmarshal([]byte(v), &strct.Children); err != nil {
                return err
             }
        case "name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
        }
    }
    return nil
}

